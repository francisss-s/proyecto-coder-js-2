var configStock = {
    longitudPedazos : 100,
    tipoCarga : "8",
    saltoFilas: 12,
    rangoFilas: 0,
    encabezado: 0,
    contratoColumnas : [
      { ind:0, nombre: "PRODUCTO", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:1, nombre: "Suma de CTRL_STOCK_ACUM", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:2, nombre: "Stock 23_Hrs", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:3, nombre: "Facturado", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:4, nombre: "Ctrl_Stock", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:5, nombre: "Stck_Teorico", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:6, nombre: "Transito Programado", requerido: true, tipo: "number", valorPorDefecto: 0},
      { ind:7, nombre: "Transito Negativo Programado", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:8, nombre: "ADICIONALES", requerido: true, tipo: "number", valorPorDefecto: 0},
      { ind:9, nombre: "Transito", requerido: true, tipo: "number", valorPorDefecto: 0},
      { ind:10, nombre: "Total", requerido: true, tipo: "number", valorPorDefecto: 0},
      { ind:11, nombre: "Pallets", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:12, nombre: "Prom_Vta_Mes", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:13, nombre: "DV Mes", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:14, nombre: "Prom_Vta_Log", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:15, nombre: "DV log + trans", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:16, nombre: "Vt_Max", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:17, nombre: "Vta_Acum", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:18, nombre: "Forecast", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:19, nombre: "% forecast", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:20, nombre: "DV FORECAST", requerido: true, tipo: "number", valorPorDefecto: 0 },
      { ind:21, nombre: "Faltante %", requerido: true, tipo: "number", valorPorDefecto: 0 }
    ]
  }
  
  
  url.getScript(`${localStorage.URL_CDN}js/SheetJS/jszip.js`,
    url.getScript(`${localStorage.URL_CDN}js/SheetJS/xlsx.js`,
      function () {
        document.getElementById('fecha_inicio').value = moment().startOf('month').format('DD-MM-YYYY');
        document.getElementById('fecha_fin').value = moment().format('DD-MM-YYYY');
        mostrarDatos()
      }
    )
  );
  //
  function muestraFiltros(){
    let filtro = document.getElementById('id_filtro');
    document.getElementById('id_carga_nueva').style.display = 'none';
    filtro.style.display = filtro.style.display === 'none' ? 'block' : 'none'
  }
  function muestraCargaNueva(){
    let filtro = document.getElementById('id_carga_nueva');
    document.getElementById('id_filtro').style.display = 'none';
    filtro.style.display = filtro.style.display === 'none' ? 'block' : 'none'
  }
  //
  async function cargarArchivoPartes() {
    Swal.fire({
      icon: "question",
      title: "¿Desea cargar este archivo?",
      html: "<div><h5>¿Está seguro que desea cargar este archivo?</h5><div>",
      showCancelButton: true,
      buttonsStyling: false,
      customClass: {
        title: 'text-secondary',
        popup: 'bg-soft',
        confirmButton: 'btn btn-primary',
        cancelButton: 'btn btn-soft-primary'
      }
    }).then(async (result) => {
      if (result.isConfirmed) {
        await cargaArchivo();
      }
    });
  }
    
  // Función para cargar el archivo por partes
  async function cargaArchivo() {
    let file = document.getElementById('i_archivo').files[0];
    if (!file) {
      funcionesPhoenix.mostrarMensaje('Por favor seleccione un archivo.', 'warning', 'btn btn-primary');
      return;
    }
    
    try {
      let jsonFormulario = await leerDatosExcel(file,configStock.encabezado,configStock.saltoFilas);
      // Datos del proceso
      let nomArchivo = file.name;
      let idEmpresa = localStorage.ID_EMPRESA;
      let usuario = localStorage.USUARIO;
      // Inicializamos la carga
      let idProceso = await inicializarProcesoCarga(nomArchivo, idEmpresa, usuario, configStock.tipoCarga);
      // Cargar partes
      await procesarYEnviarPartes(idProceso, jsonFormulario);
      // Finalizar carga
      await finalizarProcesoCarga(idEmpresa, usuario, idProceso, configStock.tipoCarga);
      mostrarDatos()
    } catch (error) {
      funcionesPhoenix.mostrarMensaje('Error al procesar el archivo', 'danger');
    }
  }
    
  async function procesarYEnviarPartes(idProceso, arregloFormulario) {
    const totalCarga = Math.ceil((arregloFormulario.length - 1) / configStock.longitudPedazos);
    funcionesPhoenix.abremodal("modal_cargando");
    const barraProgreso = document.getElementById("div_barra");
    barraProgreso.classList.remove("bg-success");
    barraProgreso.classList.add("bg-warning");
    
    for (let i = 0, partesProcesadas = 0; i < arregloFormulario.length; i += configStock.longitudPedazos, partesProcesadas++) {
      const porcentaje = Math.ceil(100 * ((partesProcesadas + 1) / totalCarga));
      document.getElementById("title_progreso").textContent = `${partesProcesadas + 1} / ${Math.round(totalCarga)}`;
      barraProgreso.style.width = `${porcentaje}%`;
    
      const pedazo = arregloFormulario.slice(i, i + configStock.longitudPedazos);
      const parteLimpia = await limpiarDatosConWorker(pedazo, configStock.contratoColumnas);
      if (parteLimpia.length > 0) {
        await enviarParte(idProceso, parteLimpia, partesProcesadas);
      }
    }
    barraProgreso.classList.remove("bg-warning");
    barraProgreso.classList.add("bg-success");
    setTimeout(() => {
      funcionesPhoenix.cierraModal("modal_cargando");
    }, 2500);
  }
  
  
  // Función para enviar una parte de los datos al servidor
  async function enviarParte(idProceso, datosFormulario, parte) {
    const params = {
      cabecera: {
        codigo: "cargas.cargar_stock_teorico_partes",
        version: "1.0.0"
      },
      cuerpo: {
        id_proceso: idProceso.toString(),
        id_empresa: localStorage.ID_EMPRESA,
        datos: datosFormulario,
        parte: parte.toString()
      },
      emisor: {
        id_empresario: localStorage.ID_EMPRESA,
        id_usuario: localStorage.USUARIO
      }
    };
    const config = {
      url: localStorage.API_FACTORY,
      method: "POST",
      body: params
    };
    try {
      await tx.request(config);
    } catch (error) {
      console.error(error);
    }
  }
  
  async function mostrarDatos(){
    let fechaInicio = document.getElementById("fecha_inicio").value;
    let fechaFin = document.getElementById("fecha_fin").value;
    let datos = await cargarDatos(localStorage.ID_EMPRESA, configStock.tipoCarga, fechaInicio, fechaFin);
    cargarTablaDatos(datos);
  }
  
  function cargarTablaDatos(datos) {
    let contenedor = document.getElementById('tabla_datos');
    contenedor.style.display = ''
    document.getElementById('tabla_datos').innerHTML = ''
    var columnas = [
      {
        title: 'Ver Carga', data: null, render:function(e){
          let html = '';
          html = `  <button class="btn" type="button" onclick="cargarDetalle(${e.ID_PROCESO})">
                           <span class="nav-link-icon" data-feather="eye"></span>                            
                       </button>`;
          return html
        },
        clasesTD: ['font-sans-serif', 'btn-reveal-trigger', 'text-center'],
        clasesTH: ['border-top', 'text-center']
      },
      { title: 'Id Proceso', data: "ID_PROCESO" },
      { title: 'Usuario Carga', data: 'USUARIO' },
      { title: 'Fecha Carga', data: 'FECHA_INICIO_TRUNC' },
      {
        title: 'Estado', data: null, render:function(e){
          let html = '';
          switch (e.ESTADO) {
          case 'I':
            html = `<span class="badge badge-phoenix badge-phoenix-info">Inicializado</span>`
            break;
          case 'T':
            html = `<span class="badge badge-phoenix badge-phoenix-primary">Terminado</span>`
            break;
          case 'E':
            html = `<span class="badge badge-phoenix badge-phoenix-danger">Eliminado</span>`
            break;
          case 'A':
            html = `<span class="badge badge-phoenix badge-phoenix-success">Aprobado</span>`
            break;
          case 'C':
            html = `<span class="badge badge-phoenix badge-phoenix-warning">Cancelado</span>`
            break;
          case 'P':
            html = `<span class="badge badge-phoenix badge-phoenix-secondary">Pendiente</span>`
            break;
          }
          return html;
  
        }
      },
      {
        title: 'N° de Registros', data: null, render:function(e){
          let htmlRegs = `<p class="text-800 fs--2 mb-0">${e.NUM_REGS - e.NUM_ERRORES} / ${e.NUM_REGS}</p>
                   <div class="progress" style="height:3px;">
                       <div class="progress-bar ${e.NUM_ERRORES === 0 ? 'bg-success' : 'bg-warning'}" style="width: ${100 * ((e.NUM_REGS - e.NUM_ERRORES) / e.NUM_REGS)}%" role="progressbar" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                   </div>`
          return htmlRegs
        }
      },
      {
        title: 'N° de Errores', data: null, render:function(e){
          if (e.NUM_ERRORES > 0) {
            return `<span class="err-register" title="Ver registros con errores" onclick="cargaDetalleErrores(${e.ID_PROCESO})">${e.NUM_ERRORES}</span>`
          } else {
            return `<span>${e.NUM_ERRORES}</span>`
          }
        }
      }
    ];
    let datosTabla = {
      columnas : columnas,
      datos : datos
    }
    $('#tabla_datos').inicializarTabla(datosTabla);
      
  }
  
  async function cargaDetalleErrores(idProceso) {
    const params = {
      id_empresa: localStorage.ID_EMPRESA,
      id_proceso: idProceso
    };
    const config = {
      url: `${localStorage.API_FACTORY}/cargas.obtener_stock_errores/2.0.0`,
      method: 'GET',
      params: params
    };
    try {
      const { response } = await tx.request(config);
      const resp = response.resp;
      cargarTablaDetalle(resp);
    } catch (error) {
      console.error(error);
    }
  }
  
  async function cargarDetalle(idProceso) {
    const params = {
      id_empresa: localStorage.ID_EMPRESA,
      id_proceso: idProceso
    };
    const config = {
      url: `${localStorage.API_FACTORY}/cargas.obtener_stock_teorico_detalle/2.0.0`,
      method: 'GET',
      params: params
    };
    try {
      const { response } = await tx.request(config);
      const resp = response.resp;
      cargarTablaDetalle(resp);
    } catch (error) {
      console.error(error);
    }
  }
  
  function cargarTablaDetalle(datos) {
    let contenedor = document.getElementById('tabla_detalle');
    contenedor.style.display = ''
    let contadorIndices = 0;
    let columnas = [];
    columnas.push({
      title: "N°", data: null, render:function(){
        contadorIndices = contadorIndices + 1;
        return `<div>${contadorIndices}</div>`;
      },
      clasesTD: ['font-sans-serif', 'btn-reveal-trigger', 'text-center'],
      clasesTH: ['sort', 'border-top', 'text-center']
    })
    Object.keys(datos[0]).forEach(v => {
      let columna = {
        title: v,
        data: v
      }
      if (columna.title === "ESTADO") {
        columna.render = function(e){
          let html = '';
          switch (e.ESTADO) {
          case 'I':
            html = `<span class="badge badge-phoenix badge-phoenix-info">Inicializado</span>`
            break;
          case 'T':
            html = `<span class="badge badge-phoenix badge-phoenix-primary">Terminado</span>`
            break;
          case 'E':
            html = `<span class="badge badge-phoenix badge-phoenix-danger">Eliminado</span>`
            break;
          case 'A':
            html = `<span class="badge badge-phoenix badge-phoenix-success">Aprobado</span>`
            break;
          case 'C':
            html = `<span class="badge badge-phoenix badge-phoenix-warning">Cancelado</span>`
            break;
          case 'P':
            html = `<span class="badge badge-phoenix badge-phoenix-secondary">Pendiente</span>`
            break;
          }
          return html;
  
        }
        columnas.push(columna);
      } else {
        columnas.push(columna);
      }
    });
    document.getElementById('tabla_detalle_interno').innerHTML = '' //limpia el div antes de generar la nueva tabla
    
    let datosTabla = {
      columnas : columnas,
      datos : datos
    }
    $('#tabla_detalle_interno').inicializarTabla(datosTabla);
      
  }